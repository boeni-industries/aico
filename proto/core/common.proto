syntax = "proto3";

package aico.core;

option go_package = "github.com/boeni-industries/aico/proto/core";
option java_package = "industries.boeni.aico.proto.core";
option java_multiple_files = true;

import "google/protobuf/timestamp.proto";

// Common types used across multiple message definitions

// Device information
message DeviceInfo {
  string device_id = 1;                // Unique device identifier
  string device_name = 2;              // User-friendly device name
  DeviceType device_type = 3;          // Type of device
  string platform = 4;                 // Operating system platform
  string version = 5;                  // AICO version running on device
  
  enum DeviceType {
    DEVICE_UNKNOWN = 0;
    DESKTOP = 1;
    LAPTOP = 2;
    MOBILE = 3;
    TABLET = 4;
    SMART_DISPLAY = 5;
    AR_HEADSET = 6;
    VR_HEADSET = 7;
    CAR_DASHBOARD = 8;
    SERVER = 9;
    OTHER = 10;
  }
}

// Roaming mode information
message RoamingMode {
  RoamingType type = 1;                // Type of roaming
  string primary_device_id = 2;        // ID of primary device (backend)
  string frontend_device_id = 3;       // ID of frontend device
  ConnectionType connection_type = 4;  // Type of connection between devices
  
  enum RoamingType {
    ROAMING_UNKNOWN = 0;
    COUPLED = 1;                       // Frontend and backend on same device
    DETACHED = 2;                      // Frontend and backend on different devices
  }
  
  enum ConnectionType {
    CONNECTION_UNKNOWN = 0;
    LOCAL_IPC = 1;                     // Local inter-process communication
    LOCAL_NETWORK = 2;                 // Local network connection
    REMOTE_NETWORK = 3;                // Remote network connection
    P2P = 4;                           // Peer-to-peer connection
  }
}

// Security context
message SecurityContext {
  string user_id = 1;                  // User identifier
  string session_id = 2;               // Session identifier
  AuthType auth_type = 3;              // Authentication type
  repeated string permissions = 4;     // Granted permissions
  bool encrypted = 5;                  // Whether payload is encrypted
  
  enum AuthType {
    AUTH_UNKNOWN = 0;
    NONE = 1;                          // No authentication
    JWT = 2;                           // JSON Web Token
    MTLS = 3;                          // Mutual TLS
    DEVICE_PAIRING = 4;                // Device pairing-based authentication
  }
}

// Resource reference
message ResourceReference {
  string resource_id = 1;              // Resource identifier
  string resource_type = 2;            // Type of resource
  string location = 3;                 // Resource location
  AccessMode access_mode = 4;          // Access mode for the resource
  
  enum AccessMode {
    ACCESS_UNKNOWN = 0;
    READ = 1;
    WRITE = 2;
    READ_WRITE = 3;
  }
}

// Error information
message ErrorInfo {
  string error_code = 1;               // Error code
  string message = 2;                  // Error message
  ErrorSeverity severity = 3;          // Error severity
  map<string, string> details = 4;     // Additional error details
  
  enum ErrorSeverity {
    SEVERITY_UNKNOWN = 0;
    INFO = 1;
    WARNING = 2;
    ERROR = 3;
    CRITICAL = 4;
  }
}
